/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utility.js']) {
  _$jscoverage['utility.js'] = [];
  _$jscoverage['utility.js'][1] = 0;
  _$jscoverage['utility.js'][8] = 0;
  _$jscoverage['utility.js'][17] = 0;
  _$jscoverage['utility.js'][18] = 0;
  _$jscoverage['utility.js'][19] = 0;
  _$jscoverage['utility.js'][20] = 0;
  _$jscoverage['utility.js'][21] = 0;
  _$jscoverage['utility.js'][22] = 0;
  _$jscoverage['utility.js'][25] = 0;
  _$jscoverage['utility.js'][35] = 0;
  _$jscoverage['utility.js'][37] = 0;
  _$jscoverage['utility.js'][50] = 0;
  _$jscoverage['utility.js'][51] = 0;
  _$jscoverage['utility.js'][52] = 0;
  _$jscoverage['utility.js'][54] = 0;
  _$jscoverage['utility.js'][63] = 0;
  _$jscoverage['utility.js'][64] = 0;
  _$jscoverage['utility.js'][67] = 0;
}
_$jscoverage['utility.js'][1]++;
var Utility = {}, util = require("util");
_$jscoverage['utility.js'][8]++;
Utility.node = util;
_$jscoverage['utility.js'][17]++;
Utility.extend = (function (options, defaults) {
  _$jscoverage['utility.js'][18]++;
  options = options || {};
  _$jscoverage['utility.js'][19]++;
  defaults = defaults || {};
  _$jscoverage['utility.js'][20]++;
  for (var o in defaults) {
    _$jscoverage['utility.js'][21]++;
    if (options[o] === undefined) {
      _$jscoverage['utility.js'][22]++;
      options[o] = defaults[o];
    }
}
  _$jscoverage['utility.js'][25]++;
  return options;
});
_$jscoverage['utility.js'][35]++;
Utility.stylize = (function (text) {
  _$jscoverage['utility.js'][37]++;
  var style, regxp, styles = {bold: 1, under: 4, blink: 5, red: 31, green: 32, purple: 35, yellow: 33, blue: 34, cyan: 36, white: 37};
  _$jscoverage['utility.js'][50]++;
  for (style in styles) {
    _$jscoverage['utility.js'][51]++;
    regxp = new RegExp("\\[" + style + "](.*?)\\[/" + style + "]");
    _$jscoverage['utility.js'][52]++;
    text = text.replace(regxp, "\u001b[" + styles[style] + "m$1\u001b[0m");
}
  _$jscoverage['utility.js'][54]++;
  return text;
});
_$jscoverage['utility.js'][63]++;
Utility.zeroize = (function (n) {
  _$jscoverage['utility.js'][64]++;
  return (n.toString().length === 1)? "0" + n: n;
});
_$jscoverage['utility.js'][67]++;
module.exports = Utility;
_$jscoverage['utility.js'].source = ["var Utility = {}, util = require('util');","","/**"," * The original node utils, I don't want to prototype it as it is static."," * @field"," * @static"," */","Utility.node = util;","","/**"," * Extends an options with defaults if defaults are undefined"," * @static"," * @param {Object} options The options to be extended"," * @param {Object} defaults The defaults to populate the options with"," * @returns {Object} The modified options"," */","Utility.extend = function(options, defaults){","  options = options || {};","  defaults = defaults || {};","  for (var o in defaults){","    if (options[o] === undefined){","      options[o] = defaults[o]; ","    }    ","  }","  return options;","};","","/**","* Formats a string to be output as a specific color or style","* brackets with the style determine the style, (eg [bold] foo [/bold])","* @static","* @param {String} text The string to stylize","* @returns {String} The stylized string","*/","Utility.stylize = function(text){","  //A mapping of styles to their respective codes","  var style, regxp, styles = {","    bold: 1, ","    under: 4, ","    blink: 5, ","    red: 31, ","    green: 32, ","    purple: 35, ","    yellow: 33, ","    blue: 34, ","    cyan: 36, ","    white: 37","  };","  ","  for (style in styles){","    regxp = new RegExp('\\\\[' + style + '](.*?)\\\\[/' + style + ']');","    text = text.replace(regxp, '\\x1B[' + styles[style] + 'm$1\\x1B[0m');","  }","  return text;","};","","/**","* Left pads single digits with a 0","* @static","* @param {Number} n The number to left pad with a 0","* @returns {String} The modified number","*/","Utility.zeroize = function(n) { ","  return (n.toString().length === 1) ? '0' + n : n; ","};","","module.exports = Utility;"];
